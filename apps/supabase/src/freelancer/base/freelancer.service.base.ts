/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Freelancer as PrismaFreelancer,
  Client as PrismaClient,
  Contract as PrismaContract,
  Proposal as PrismaProposal,
} from "@prisma/client";

export class FreelancerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FreelancerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.freelancer.count(args);
  }

  async freelancers(
    args: Prisma.FreelancerFindManyArgs
  ): Promise<PrismaFreelancer[]> {
    return this.prisma.freelancer.findMany(args);
  }
  async freelancer(
    args: Prisma.FreelancerFindUniqueArgs
  ): Promise<PrismaFreelancer | null> {
    return this.prisma.freelancer.findUnique(args);
  }
  async createFreelancer(
    args: Prisma.FreelancerCreateArgs
  ): Promise<PrismaFreelancer> {
    return this.prisma.freelancer.create(args);
  }
  async updateFreelancer(
    args: Prisma.FreelancerUpdateArgs
  ): Promise<PrismaFreelancer> {
    return this.prisma.freelancer.update(args);
  }
  async deleteFreelancer(
    args: Prisma.FreelancerDeleteArgs
  ): Promise<PrismaFreelancer> {
    return this.prisma.freelancer.delete(args);
  }

  async findClients(
    parentId: string,
    args: Prisma.ClientFindManyArgs
  ): Promise<PrismaClient[]> {
    return this.prisma.freelancer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .clients(args);
  }

  async findContracts(
    parentId: string,
    args: Prisma.ContractFindManyArgs
  ): Promise<PrismaContract[]> {
    return this.prisma.freelancer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contracts(args);
  }

  async findProposals(
    parentId: string,
    args: Prisma.ProposalFindManyArgs
  ): Promise<PrismaProposal[]> {
    return this.prisma.freelancer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .proposals(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.freelancer
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }
}
