/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Freelancer } from "./Freelancer";
import { FreelancerCountArgs } from "./FreelancerCountArgs";
import { FreelancerFindManyArgs } from "./FreelancerFindManyArgs";
import { FreelancerFindUniqueArgs } from "./FreelancerFindUniqueArgs";
import { CreateFreelancerArgs } from "./CreateFreelancerArgs";
import { UpdateFreelancerArgs } from "./UpdateFreelancerArgs";
import { DeleteFreelancerArgs } from "./DeleteFreelancerArgs";
import { ClientFindManyArgs } from "../../client/base/ClientFindManyArgs";
import { Client } from "../../client/base/Client";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ProposalFindManyArgs } from "../../proposal/base/ProposalFindManyArgs";
import { Proposal } from "../../proposal/base/Proposal";
import { FreelancerService } from "../freelancer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Freelancer)
export class FreelancerResolverBase {
  constructor(
    protected readonly service: FreelancerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "read",
    possession: "any",
  })
  async _freelancersMeta(
    @graphql.Args() args: FreelancerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Freelancer])
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "read",
    possession: "any",
  })
  async freelancers(
    @graphql.Args() args: FreelancerFindManyArgs
  ): Promise<Freelancer[]> {
    return this.service.freelancers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Freelancer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "read",
    possession: "own",
  })
  async freelancer(
    @graphql.Args() args: FreelancerFindUniqueArgs
  ): Promise<Freelancer | null> {
    const result = await this.service.freelancer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Freelancer)
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "create",
    possession: "any",
  })
  async createFreelancer(
    @graphql.Args() args: CreateFreelancerArgs
  ): Promise<Freelancer> {
    return await this.service.createFreelancer({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Freelancer)
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async updateFreelancer(
    @graphql.Args() args: UpdateFreelancerArgs
  ): Promise<Freelancer | null> {
    try {
      return await this.service.updateFreelancer({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Freelancer)
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "delete",
    possession: "any",
  })
  async deleteFreelancer(
    @graphql.Args() args: DeleteFreelancerArgs
  ): Promise<Freelancer | null> {
    try {
      return await this.service.deleteFreelancer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Client], { name: "clients" })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async findClients(
    @graphql.Parent() parent: Freelancer,
    @graphql.Args() args: ClientFindManyArgs
  ): Promise<Client[]> {
    const results = await this.service.findClients(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Contract], { name: "contracts" })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @graphql.Parent() parent: Freelancer,
    @graphql.Args() args: ContractFindManyArgs
  ): Promise<Contract[]> {
    const results = await this.service.findContracts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Proposal], { name: "proposals" })
  @nestAccessControl.UseRoles({
    resource: "Proposal",
    action: "read",
    possession: "any",
  })
  async findProposals(
    @graphql.Parent() parent: Freelancer,
    @graphql.Args() args: ProposalFindManyArgs
  ): Promise<Proposal[]> {
    const results = await this.service.findProposals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(
    @graphql.Parent() parent: Freelancer
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
