/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FreelancerService } from "../freelancer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FreelancerCreateInput } from "./FreelancerCreateInput";
import { Freelancer } from "./Freelancer";
import { FreelancerFindManyArgs } from "./FreelancerFindManyArgs";
import { FreelancerWhereUniqueInput } from "./FreelancerWhereUniqueInput";
import { FreelancerUpdateInput } from "./FreelancerUpdateInput";
import { ClientFindManyArgs } from "../../client/base/ClientFindManyArgs";
import { Client } from "../../client/base/Client";
import { ClientWhereUniqueInput } from "../../client/base/ClientWhereUniqueInput";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";
import { ProposalFindManyArgs } from "../../proposal/base/ProposalFindManyArgs";
import { Proposal } from "../../proposal/base/Proposal";
import { ProposalWhereUniqueInput } from "../../proposal/base/ProposalWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FreelancerControllerBase {
  constructor(
    protected readonly service: FreelancerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Freelancer })
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFreelancer(
    @common.Body() data: FreelancerCreateInput
  ): Promise<Freelancer> {
    return await this.service.createFreelancer({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,
      },
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        id: true,
        name: true,
        skills: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Freelancer] })
  @ApiNestedQuery(FreelancerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async freelancers(@common.Req() request: Request): Promise<Freelancer[]> {
    const args = plainToClass(FreelancerFindManyArgs, request.query);
    return this.service.freelancers({
      ...args,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        id: true,
        name: true,
        skills: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Freelancer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async freelancer(
    @common.Param() params: FreelancerWhereUniqueInput
  ): Promise<Freelancer | null> {
    const result = await this.service.freelancer({
      where: params,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        id: true,
        name: true,
        skills: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Freelancer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFreelancer(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() data: FreelancerUpdateInput
  ): Promise<Freelancer | null> {
    try {
      return await this.service.updateFreelancer({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,
        },
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          email: true,
          id: true,
          name: true,
          skills: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Freelancer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFreelancer(
    @common.Param() params: FreelancerWhereUniqueInput
  ): Promise<Freelancer | null> {
    try {
      return await this.service.deleteFreelancer({
        where: params,
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          email: true,
          id: true,
          name: true,
          skills: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/clients")
  @ApiNestedQuery(ClientFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async findClients(
    @common.Req() request: Request,
    @common.Param() params: FreelancerWhereUniqueInput
  ): Promise<Client[]> {
    const query = plainToClass(ClientFindManyArgs, request.query);
    const results = await this.service.findClients(params.id, {
      ...query,
      select: {
        budget: true,
        createdAt: true,
        email: true,

        freelancer: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/clients")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async connectClients(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ClientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clients: {
        connect: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/clients")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async updateClients(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ClientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clients: {
        set: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/clients")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async disconnectClients(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ClientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clients: {
        disconnect: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/contracts")
  @ApiNestedQuery(ContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @common.Req() request: Request,
    @common.Param() params: FreelancerWhereUniqueInput
  ): Promise<Contract[]> {
    const query = plainToClass(ContractFindManyArgs, request.query);
    const results = await this.service.findContracts(params.id, {
      ...query,
      select: {
        charges: true,

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,

        freelancer: {
          select: {
            id: true,
          },
        },

        id: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async connectContracts(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        connect: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async updateContracts(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        set: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async disconnectContracts(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        disconnect: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/proposals")
  @ApiNestedQuery(ProposalFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Proposal",
    action: "read",
    possession: "any",
  })
  async findProposals(
    @common.Req() request: Request,
    @common.Param() params: FreelancerWhereUniqueInput
  ): Promise<Proposal[]> {
    const query = plainToClass(ProposalFindManyArgs, request.query);
    const results = await this.service.findProposals(params.id, {
      ...query,
      select: {
        coverLetter: true,
        createdAt: true,

        freelancer: {
          select: {
            id: true,
          },
        },

        id: true,

        job: {
          select: {
            id: true,
          },
        },

        rate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/proposals")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async connectProposals(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposals: {
        connect: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/proposals")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async updateProposals(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposals: {
        set: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/proposals")
  @nestAccessControl.UseRoles({
    resource: "Freelancer",
    action: "update",
    possession: "any",
  })
  async disconnectProposals(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() body: ProposalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proposals: {
        disconnect: body,
      },
    };
    await this.service.updateFreelancer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
